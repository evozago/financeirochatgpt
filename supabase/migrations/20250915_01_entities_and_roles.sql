-- financeirolb: entidades canônicas (PF/PJ) + papéis
-- Idempotente. Seguro para rodar em bancos já existentes.
-- v1.0 - 2025-09-15

BEGIN;

-- 1) Tabela unificada de entidades (PF e PJ)
CREATE TABLE IF NOT EXISTS public.entidades (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome TEXT NOT NULL,
  tipo_pessoa VARCHAR(8) NOT NULL CHECK (tipo_pessoa IN ('FISICA','JURIDICA')),
  documento VARCHAR(32),   -- CPF ou CNPJ sem máscara
  email TEXT,
  telefone TEXT,
  ativo BOOLEAN NOT NULL DEFAULT TRUE,
  criado_em TIMESTAMPTZ NOT NULL DEFAULT now(),
  atualizado_em TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- gatilho simples para updated_at
CREATE OR REPLACE FUNCTION public.set_atualizado_em()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.atualizado_em := now();
  RETURN NEW;
END; $$;

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'tg_entidades_set_atualizado_em'
  ) THEN
    CREATE TRIGGER tg_entidades_set_atualizado_em
    BEFORE UPDATE ON public.entidades
    FOR EACH ROW EXECUTE FUNCTION public.set_atualizado_em();
  END IF;
END $$;

-- 2) Enum de papéis e tabela de mapeamento
DO $$ BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'tipo_papel') THEN
    CREATE TYPE public.tipo_papel AS ENUM ('FORNECEDOR','CLIENTE','FUNCIONARIO');
  END IF;
END $$;

CREATE TABLE IF NOT EXISTS public.entidade_papel (
  entidade_id BIGINT NOT NULL REFERENCES public.entidades(id) ON DELETE CASCADE,
  papel public.tipo_papel NOT NULL,
  atribuicao_em TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (entidade_id, papel)
);

-- 3) (Opcional) Tabela de referência "papeis" para UI
CREATE TABLE IF NOT EXISTS public.papeis (
  nome public.tipo_papel PRIMARY KEY
);
INSERT INTO public.papeis (nome)
SELECT unnest(enum_range(NULL::public.tipo_papel))
ON CONFLICT (nome) DO NOTHING;

-- 4) Migração (se existirem tabelas antigas)
-- 4.1) Migrar entidades de 'entidades_corporativas' para 'entidades'
DO $$
DECLARE
  _has_old BOOLEAN;
BEGIN
  SELECT EXISTS (
    SELECT 1 FROM information_schema.tables
    WHERE table_schema='public' AND table_name='entidades_corporativas'
  ) INTO _has_old;

  IF _has_old THEN
    INSERT INTO public.entidades (id, nome, tipo_pessoa, documento, email, telefone, ativo, criado_em, atualizado_em)
    SELECT ec.id,
           ec.nome,
           ec.tipo_pessoa,
           COALESCE(NULLIF(ec.cnpj,''), NULLIF(ec.cpf,'')) AS documento,
           ec.email,
           ec.telefone,
           COALESCE(ec.ativo, TRUE),
           now(), now()
    FROM public.entidades_corporativas ec
    ON CONFLICT (id) DO NOTHING;

    -- Papéis: assume colunas booleanas fornecedor/cliente/funcionario
    INSERT INTO public.entidade_papel (entidade_id, papel)
    SELECT ec.id, 'FORNECEDOR'::public.tipo_papel FROM public.entidades_corporativas ec WHERE COALESCE(ec.fornecedor, FALSE) = TRUE
    ON CONFLICT DO NOTHING;
    INSERT INTO public.entidade_papel (entidade_id, papel)
    SELECT ec.id, 'CLIENTE'::public.tipo_papel FROM public.entidades_corporativas ec WHERE COALESCE(ec.cliente, FALSE) = TRUE
    ON CONFLICT DO NOTHING;
    INSERT INTO public.entidade_papel (entidade_id, papel)
    SELECT ec.id, 'FUNCIONARIO'::public.tipo_papel FROM public.entidades_corporativas ec WHERE COALESCE(ec.funcionario, FALSE) = TRUE
    ON CONFLICT DO NOTHING;
  END IF;
END $$;

-- 4.2) Migrar vendedoras (se existir) para entidades com papel FUNCIONARIO
DO $$
DECLARE
  _has_vend BOOLEAN;
BEGIN
  SELECT EXISTS (
    SELECT 1 FROM information_schema.tables
    WHERE table_schema='public' AND table_name='vendedoras'
  ) INTO _has_vend;

  IF _has_vend THEN
    -- Insere entidades pela chave documento (cpf). Se nao houver cpf, usa nome como fallback (não ideal)
    INSERT INTO public.entidades (nome, tipo_pessoa, documento, email, telefone, ativo)
    SELECT v.nome, 'FISICA', NULLIF(v.cpf,''), NULLIF(v.email,''), NULLIF(v.telefone,''), COALESCE(v.ativa, TRUE)
    FROM public.vendedoras v
    ON CONFLICT (documento) DO NOTHING;

    -- vincula papel FUNCIONARIO
    INSERT INTO public.entidade_papel (entidade_id, papel)
    SELECT e.id, 'FUNCIONARIO'
    FROM public.entidades e
    JOIN public.vendedoras v 
      ON (e.documento IS NOT NULL AND e.documento = NULLIF(v.cpf,''))
      OR (e.documento IS NULL AND e.nome = v.nome)
    ON CONFLICT DO NOTHING;
  END IF;
END $$;

COMMIT;
