-- Metas & Vendas base
-- v1.0 - 2025-09-16

BEGIN;

-- 1) Tabela de metas mensais por entidade (vendedor)
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.tables
    WHERE table_schema='public' AND table_name='metas_mensais'
  ) THEN
    CREATE TABLE public.metas_mensais (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      entidade_id BIGINT NOT NULL,             -- referencia entidades.id (vendedor)
      ano INT NOT NULL CHECK (ano >= 2000 AND ano <= 2100),
      mes INT NOT NULL CHECK (mes BETWEEN 1 AND 12),
      valor_meta NUMERIC(14,2) NOT NULL CHECK (valor_meta >= 0),
      criado_em TIMESTAMPTZ NOT NULL DEFAULT now(),
      UNIQUE (entidade_id, ano, mes)
    );
    CREATE INDEX IF NOT EXISTS idx_metas_entidade ON public.metas_mensais(entidade_id);
    CREATE INDEX IF NOT EXISTS idx_metas_ano      ON public.metas_mensais(ano);
    CREATE INDEX IF NOT EXISTS idx_metas_mes      ON public.metas_mensais(mes);
  END IF;
END$$;

-- 2) Tabela de vendas mensais por entidade (vendedor)
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.tables
    WHERE table_schema='public' AND table_name='vendas_mensais'
  ) THEN
    CREATE TABLE public.vendas_mensais (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      entidade_id BIGINT NOT NULL,             -- referencia entidades.id (vendedor)
      ano INT NOT NULL CHECK (ano >= 2000 AND ano <= 2100),
      mes INT NOT NULL CHECK (mes BETWEEN 1 AND 12),
      valor_vendido NUMERIC(14,2) NOT NULL CHECK (valor_vendido >= 0),
      criado_em TIMESTAMPTZ NOT NULL DEFAULT now()
    );
    CREATE INDEX IF NOT EXISTS idx_vendas_entidade ON public.vendas_mensais(entidade_id);
    CREATE INDEX IF NOT EXISTS idx_vendas_ano      ON public.vendas_mensais(ano);
    CREATE INDEX IF NOT EXISTS idx_vendas_mes      ON public.vendas_mensais(mes);
  END IF;
END$$;

-- 3) RLS (DEV): liberar para authenticated (depois refinamos por organização/filial/papéis)
ALTER TABLE public.metas_mensais  ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vendas_mensais ENABLE ROW LEVEL SECURITY;

-- Limpeza idempotente de policies
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='metas_mensais') THEN
    DROP POLICY IF EXISTS metas_all_auth ON public.metas_mensais;
  END IF;
  IF EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='vendas_mensais') THEN
    DROP POLICY IF EXISTS vendas_all_auth ON public.vendas_mensais;
  END IF;
END$$;

-- Permissivas para DEV (qualquer authenticated pode ler/escrever)
CREATE POLICY metas_all_auth
  ON public.metas_mensais
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

CREATE POLICY vendas_all_auth
  ON public.vendas_mensais
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- 4) View de resumo (meta, vendido e realização por entidade/ano/mês)
CREATE OR REPLACE VIEW public.vw_metas_vendas_resumo AS
WITH m AS (
  SELECT entidade_id, ano, mes, valor_meta
  FROM public.metas_mensais
),
v AS (
  SELECT entidade_id, ano, mes, SUM(valor_vendido) AS total_vendido
  FROM public.vendas_mensais
  GROUP BY entidade_id, ano, mes
)
SELECT
  COALESCE(m.entidade_id, v.entidade_id) AS entidade_id,
  COALESCE(m.ano,        v.ano)          AS ano,
  COALESCE(m.mes,        v.mes)          AS mes,
  m.valor_meta,
  v.total_vendido,
  CASE
    WHEN (m.valor_meta IS NULL OR m.valor_meta = 0) THEN NULL
    ELSE ROUND( (COALESCE(v.total_vendido,0) / m.valor_meta) * 100, 2)
  END AS atingimento_percentual
FROM m
FULL OUTER JOIN v
  ON m.entidade_id = v.entidade_id
 AND m.ano        = v.ano
 AND m.mes        = v.mes;

COMMIT;
